Python 3.7.2 (tags/v3.7.2:9a3ffc0492, Dec 23 2018, 23:09:28) [MSC v.1916 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license()" for more information.
>>> import numpy as np
>>> import pandas as pdv
>>> import pandas as pd
>>> crime_anal= pd.read_excel('D:/SMWU_PY/2017_crime_rawdata.xlsx')
>>> crime_anal.head()
   자치구  발생합계  검거합계  살인발생  살인검거  강도발생  강도검거  강간발생  강간검거  절도발생  절도검거  폭력발생  폭력검거
0  종로구  4057  4437     7     9    10    15   253  1412  1644   905  2143  2096
1   중구  4184  2851     1     0     9     9   267   149  1846   889  2061  1804
2  용산구  4060  2936     1     1     5     4   327   289  1346   626  2381  2016
3  성동구  2767  2031     1     1     3     3   132   106  1072   543  1559  1378
4  광진구  4646  3289     6     5    13     8   261   208  2220  1168  2146  1900
>>> crime_anal['살인검거율'] = crime_anal['살인검거']/crime_anal['살인발생']*100
>>> crime_anal['강간검거율'] = crime_anal['강간검거']/crime_anal['강간발생']*100
>>> crime_anal['강도검거율'] = crime_anal['강도검거']/crime_anal['강도발생']*100
>>> crime_anal['절도검거율'] = crime_anal['절도검거']/crime_anal['절도발생']*100
>>> crime_anal['폭력검거율'] = crime_anal['폭력검거']/crime_anal['폭력발생']*100
>>> del crime_anal['강간검거']
>>> del crime_anal['강도검거']
>>> del crime_anal['살인검거']
>>> del crime_anal['절도검거']
>>> del crime_anal['폭력검거']
>>> crime_anal.head()
   자치구  발생합계  검거합계  살인발생  ...       강간검거율       강도검거율      절도검거율      폭력검거율
0  종로구  4057  4437     7  ...  558.102767  150.000000  55.048662  97.806813
1   중구  4184  2851     1  ...   55.805243  100.000000  48.158180  87.530325
2  용산구  4060  2936     1  ...   88.379205   80.000000  46.508172  84.670307
3  성동구  2767  2031     1  ...   80.303030  100.000000  50.652985  88.389994
4  광진구  4646  3289     6  ...   79.693487   61.538462  52.612613  88.536813

[5 rows x 13 columns]
>>> con_list = ['강간검거율', '강도검거율', '살인검거율', '절도검거율', '폭력검거율']
>>> for column in con_list:
         crime_anal.loc[crime_anal[column] > 100, column] = 100

         
>>> crime_anal.head()
   자치구  발생합계  검거합계  살인발생  ...       강간검거율       강도검거율      절도검거율      폭력검거율
0  종로구  4057  4437     7  ...  100.000000  100.000000  55.048662  97.806813
1   중구  4184  2851     1  ...   55.805243  100.000000  48.158180  87.530325
2  용산구  4060  2936     1  ...   88.379205   80.000000  46.508172  84.670307
3  성동구  2767  2031     1  ...   80.303030  100.000000  50.652985  88.389994
4  광진구  4646  3289     6  ...   79.693487   61.538462  52.612613  88.536813

[5 rows x 13 columns]
>>> crime_anal.rename(columns = {'강간발생':'강간', 
                             '강도발생':'강도', 
                             '살인발생':'살인', 
                             '절도발생':'절도', 
                             '폭력발생':'폭력'}, inplace=True)
>>> crime_anal.head()
   자치구  발생합계  검거합계  살인  ...       강간검거율       강도검거율      절도검거율      폭력검거율
0  종로구  4057  4437   7  ...  100.000000  100.000000  55.048662  97.806813
1   중구  4184  2851   1  ...   55.805243  100.000000  48.158180  87.530325
2  용산구  4060  2936   1  ...   88.379205   80.000000  46.508172  84.670307
3  성동구  2767  2031   1  ...   80.303030  100.000000  50.652985  88.389994
4  광진구  4646  3289   6  ...   79.693487   61.538462  52.612613  88.536813

[5 rows x 13 columns]
>>> from sklearn import preprocessing
>>> col = ['강간', '강도', '살인', '절도', '폭력']
>>> x = crime_anal[col].values
>>> min_max_scaler = preprocessing.MinMaxScaler()
>>> x_scaled = min_max_scaler.fit_transform(x.astype(float))
>>> crime_anal_norm = pd.DataFrame(x_scaled, columns = col, index = crime_anal.index)
>>> col2 = ['강간검거율', '강도검거율', '살인검거율', '절도검거율', '폭력검거율']
>>> crime_anal_norm[col2] = crime_anal[col2]
>>> crime_anal_norm.head()
         강간        강도        살인  ...       살인검거율      절도검거율      폭력검거율
0  0.296223  0.473684  0.428571  ...  100.000000  55.048662  97.806813
1  0.324056  0.421053  0.000000  ...    0.000000  48.158180  87.530325
2  0.443340  0.210526  0.000000  ...  100.000000  46.508172  84.670307
3  0.055666  0.105263  0.000000  ...  100.000000  50.652985  88.389994
4  0.312127  0.631579  0.357143  ...   83.333333  52.612613  88.536813

[5 rows x 10 columns]
>>> crime_anal.head()
   자치구  발생합계  검거합계  살인  ...       강간검거율       강도검거율      절도검거율      폭력검거율
0  종로구  4057  4437   7  ...  100.000000  100.000000  55.048662  97.806813
1   중구  4184  2851   1  ...   55.805243  100.000000  48.158180  87.530325
2  용산구  4060  2936   1  ...   88.379205   80.000000  46.508172  84.670307
3  성동구  2767  2031   1  ...   80.303030  100.000000  50.652985  88.389994
4  광진구  4646  3289   6  ...   79.693487   61.538462  52.612613  88.536813

[5 rows x 13 columns]
>>> crime_anal_norm=crime_anal
>>> crime_anal_norm[col2] = crime_anal[col2]
>>> crime_anal_norm.head()
   자치구  발생합계  검거합계  살인  ...       강간검거율       강도검거율      절도검거율      폭력검거율
0  종로구  4057  4437   7  ...  100.000000  100.000000  55.048662  97.806813
1   중구  4184  2851   1  ...   55.805243  100.000000  48.158180  87.530325
2  용산구  4060  2936   1  ...   88.379205   80.000000  46.508172  84.670307
3  성동구  2767  2031   1  ...   80.303030  100.000000  50.652985  88.389994
4  광진구  4646  3289   6  ...   79.693487   61.538462  52.612613  88.536813

[5 rows x 13 columns]
>>> divorce = pd.read_csv('D:/SMWU_PY/2017_divorce2.csv', encoding='utf-8')
>>> divorce.head()
   자치구     이혼
0   합계  17083
1  종로구    265
2   중구    253
3  용산구    389
4  성동구    509
>>> divorce = pd.read_csv('D:/SMWU_PY/2017_divorce3.csv', encoding='utf-8')
>>> divorce.head()
    자치구\t이혼
0  종로구\t265
1   중구\t253
2  용산구\t389
3  성동구\t509
4  광진구\t612

>>> divorce = pd.read_csv('D:/SMWU_PY/2017_divorce2.csv', encoding='utf-8')
>>> divorce.head()
   자치구   이혼
0  종로구  265
1   중구  253
2  용산구  389
3  성동구  509
4  광진구  612
>>> crime_anal_norm[['이혼']] = divorce[['이혼']]
>>> crime_anal_norm.head()
   자치구  발생합계  검거합계  살인  강도  ...       강간검거율       강도검거율      절도검거율      폭력검거율   이혼
0  종로구  4057  4437   7  10  ...  100.000000  100.000000  55.048662  97.806813  265
1   중구  4184  2851   1   9  ...   55.805243  100.000000  48.158180  87.530325  253
2  용산구  4060  2936   1   5  ...   88.379205   80.000000  46.508172  84.670307  389
3  성동구  2767  2031   1   3  ...   80.303030  100.000000  50.652985  88.389994  509
4  광진구  4646  3289   6  13  ...   79.693487   61.538462  52.612613  88.536813  612

[5 rows x 14 columns]
>>> ingu = pd.read_csv('D:/SMWU_PY/2017_ingu.csv', encoding='utf-8')
>>> ingu.head()
   자치구        인구
0   합계  10124579
1  종로구    164257
2   중구    134593
3  용산구    244444
4  성동구    312711
>>> crime_anal_norm[['이혼']] = divorce[['이혼']]
>>> crime_anal_norm.head()
   자치구  발생합계  검거합계  살인  강도  ...       강간검거율       강도검거율      절도검거율      폭력검거율   이혼
0  종로구  4057  4437   7  10  ...  100.000000  100.000000  55.048662  97.806813  265
1   중구  4184  2851   1   9  ...   55.805243  100.000000  48.158180  87.530325  253
2  용산구  4060  2936   1   5  ...   88.379205   80.000000  46.508172  84.670307  389
3  성동구  2767  2031   1   3  ...   80.303030  100.000000  50.652985  88.389994  509
4  광진구  4646  3289   6  13  ...   79.693487   61.538462  52.612613  88.536813  612

[5 rows x 14 columns]
>>> crime_anal_norm[['인구']] = ingu[['인구']]
>>> crime_anal_norm.head()
   자치구  발생합계  검거합계  살인  강도  ...       강도검거율      절도검거율      폭력검거율   이혼        인구
0  종로구  4057  4437   7  10  ...  100.000000  55.048662  97.806813  265  10124579
1   중구  4184  2851   1   9  ...  100.000000  48.158180  87.530325  253    164257
2  용산구  4060  2936   1   5  ...   80.000000  46.508172  84.670307  389    134593
3  성동구  2767  2031   1   3  ...  100.000000  50.652985  88.389994  509    244444
4  광진구  4646  3289   6  13  ...   61.538462  52.612613  88.536813  612    312711

[5 rows x 15 columns]
>>> col = ['강간','강도','살인','절도','폭력']
>>> crime_anal_norm['강간']
0     253
1     267
2     327
3     132
4     261
5     165
6     172
7     173
8     208
9     104
10    180
11    230
12    202
13    500
14    138
15    316
16    328
17    240
18    455
19    396
20    379
21    470
22    607
23    288
24    172
Name: 강간, dtype: int64
>>> crime_anal_norm=crime_anal
>>> crime_anal_norm.head()
   자치구  발생합계  검거합계  살인  강도  ...       강도검거율      절도검거율      폭력검거율   이혼        인구
0  종로구  4057  4437   7  10  ...  100.000000  55.048662  97.806813  265  10124579
1   중구  4184  2851   1   9  ...  100.000000  48.158180  87.530325  253    164257
2  용산구  4060  2936   1   5  ...   80.000000  46.508172  84.670307  389    134593
3  성동구  2767  2031   1   3  ...  100.000000  50.652985  88.389994  509    244444
4  광진구  4646  3289   6  13  ...   61.538462  52.612613  88.536813  612    312711

[5 rows x 15 columns]
>>> crime_anal=crime_anal_norm
>>> crime_anal.head()
   자치구  발생합계  검거합계  살인  강도  ...       강도검거율      절도검거율      폭력검거율   이혼        인구
0  종로구  4057  4437   7  10  ...  100.000000  55.048662  97.806813  265  10124579
1   중구  4184  2851   1   9  ...  100.000000  48.158180  87.530325  253    164257
2  용산구  4060  2936   1   5  ...   80.000000  46.508172  84.670307  389    134593
3  성동구  2767  2031   1   3  ...  100.000000  50.652985  88.389994  509    244444
4  광진구  4646  3289   6  13  ...   61.538462  52.612613  88.536813  612    312711

[5 rows x 15 columns]
>>> col = ['강간', '강도', '살인', '절도', '폭력']
>>> x = crime_anal[col].values
>>> min_max_scaler = preprocessing.MinMaxScaler()
>>> x_scaled = min_max_scaler.fit_transform(x.astype(float))
>>> crime_anal_norm = pd.DataFrame(x_scaled, columns = col, index = crime_anal.index)

>>> col2 = ['강간검거율', '강도검거율', '살인검거율', '절도검거율', '폭력검거율']
>>> crime_anal_norm[col2] = crime_anal[col2]
>>> crime_anal_norm.head()
         강간        강도        살인  ...       살인검거율      절도검거율      폭력검거율
0  0.296223  0.473684  0.428571  ...  100.000000  55.048662  97.806813
1  0.324056  0.421053  0.000000  ...    0.000000  48.158180  87.530325
2  0.443340  0.210526  0.000000  ...  100.000000  46.508172  84.670307
3  0.055666  0.105263  0.000000  ...  100.000000  50.652985  88.389994
4  0.312127  0.631579  0.357143  ...   83.333333  52.612613  88.536813

[5 rows x 10 columns]
>>> crime_anal2 = crime_anal
>>> crime_anal2.head()
   자치구  발생합계  검거합계  살인  강도  ...       강도검거율      절도검거율      폭력검거율   이혼        인구
0  종로구  4057  4437   7  10  ...  100.000000  55.048662  97.806813  265  10124579
1   중구  4184  2851   1   9  ...  100.000000  48.158180  87.530325  253    164257
2  용산구  4060  2936   1   5  ...   80.000000  46.508172  84.670307  389    134593
3  성동구  2767  2031   1   3  ...  100.000000  50.652985  88.389994  509    244444
4  광진구  4646  3289   6  13  ...   61.538462  52.612613  88.536813  612    312711

[5 rows x 15 columns]
>>> crime_anal[col2]=crime_anal_norm[col2]
>>> crime_anal.head()
   자치구  발생합계  검거합계  살인  강도  ...       강도검거율      절도검거율      폭력검거율   이혼        인구
0  종로구  4057  4437   7  10  ...  100.000000  55.048662  97.806813  265  10124579
1   중구  4184  2851   1   9  ...  100.000000  48.158180  87.530325  253    164257
2  용산구  4060  2936   1   5  ...   80.000000  46.508172  84.670307  389    134593
3  성동구  2767  2031   1   3  ...  100.000000  50.652985  88.389994  509    244444
4  광진구  4646  3289   6  13  ...   61.538462  52.612613  88.536813  612    312711

[5 rows x 15 columns]
>>> crime_anal[col2]
         강간검거율       강도검거율       살인검거율      절도검거율      폭력검거율
0   100.000000  100.000000  100.000000  55.048662  97.806813
1    55.805243  100.000000    0.000000  48.158180  87.530325
2    88.379205   80.000000  100.000000  46.508172  84.670307
3    80.303030  100.000000  100.000000  50.652985  88.389994
4    79.693487   61.538462   83.333333  52.612613  88.536813
5    90.303030  100.000000   90.909091  65.740142  93.063584
6    83.720930  100.000000  100.000000  53.033268  84.884535
7    77.456647  100.000000  100.000000  52.306548  85.541535
8    73.557692   71.428571  100.000000  62.623274  93.831169
9   100.000000  100.000000  100.000000  65.876777  88.712242
10   86.111111   77.777778  100.000000  49.219766  85.714286
11   92.608696  100.000000  100.000000  67.339582  90.868794
12   89.603960  100.000000  100.000000  58.455285  83.114558
13   85.800000  100.000000  100.000000  39.971347  83.127572
14   88.405797   66.666667   66.666667  47.547170  82.774674
15   80.063291  100.000000  100.000000  58.951271  87.242798
16   55.182927   75.000000  100.000000  50.376812  82.914751
17   88.333333  100.000000  100.000000  59.070990  89.434365
18   58.681319  100.000000   86.666667  48.090278  82.100313
19   43.686869  100.000000  100.000000  48.368679  86.235294
20   85.224274   85.714286   87.500000  58.211218  84.581218
21   60.212766   53.846154  100.000000  46.081678  87.437604
22   81.713344  100.000000  100.000000  44.185304  86.223458
23   84.027778  100.000000  100.000000  45.118734  86.232125
24   98.255814  100.000000  100.000000  57.689970  86.825854
>>> crime_anal[col]=crime_anal_norm[col]
>>> crime_anal[col]
          강간        강도        살인        절도        폭력
0   0.296223  0.473684  0.428571  0.404886  0.328021
1   0.324056  0.421053  0.000000  0.485783  0.297628
2   0.443340  0.210526  0.000000  0.285543  0.416234
3   0.055666  0.105263  0.000000  0.175811  0.111564
4   0.312127  0.631579  0.357143  0.635563  0.329133
5   0.121272  0.105263  0.714286  0.366039  0.367309
6   0.135189  0.105263  0.285714  0.360433  0.593032
7   0.137177  0.368421  0.428571  0.284742  0.238695
8   0.206759  0.315789  0.500000  0.152583  0.332839
9   0.000000  0.105263  0.000000  0.000000  0.000000
10  0.151093  0.421053  0.214286  0.362435  0.452187
11  0.250497  0.157895  0.357143  0.301962  0.369904
12  0.194831  0.000000  0.214286  0.239087  0.154930
13  0.787276  0.368421  0.142857  0.585102  0.524463
14  0.067594  0.105263  0.142857  0.383260  0.329874
15  0.421471  0.157895  0.714286  0.502603  0.614529
16  0.445328  0.368421  0.428571  0.437325  0.581542
17  0.270378  0.210526  0.285714  0.203444  0.228317
18  0.697813  0.210526  1.000000  0.669203  0.716086
19  0.580517  0.315789  0.000000  0.237485  0.163825
20  0.546720  0.315789  0.500000  0.539047  0.702001
21  0.727634  0.631579  0.571429  0.472167  0.424759
22  1.000000  1.000000  0.428571  1.000000  1.000000
23  0.365805  0.000000  0.357143  0.657189  0.648258
24  0.135189  0.473684  0.285714  0.405286  0.434025
>>> crime_anal.head()
   자치구  발생합계  검거합계        살인  ...      절도검거율      폭력검거율   이혼        인구
0  종로구  4057  4437  0.428571  ...  55.048662  97.806813  265  10124579
1   중구  4184  2851  0.000000  ...  48.158180  87.530325  253    164257
2  용산구  4060  2936  0.000000  ...  46.508172  84.670307  389    134593
3  성동구  2767  2031  0.000000  ...  50.652985  88.389994  509    244444
4  광진구  4646  3289  0.357143  ...  52.612613  88.536813  612    312711

[5 rows x 15 columns]
>>> crime_anal[col]
          강간        강도        살인        절도        폭력
0   0.296223  0.473684  0.428571  0.404886  0.328021
1   0.324056  0.421053  0.000000  0.485783  0.297628
2   0.443340  0.210526  0.000000  0.285543  0.416234
3   0.055666  0.105263  0.000000  0.175811  0.111564
4   0.312127  0.631579  0.357143  0.635563  0.329133
5   0.121272  0.105263  0.714286  0.366039  0.367309
6   0.135189  0.105263  0.285714  0.360433  0.593032
7   0.137177  0.368421  0.428571  0.284742  0.238695
8   0.206759  0.315789  0.500000  0.152583  0.332839
9   0.000000  0.105263  0.000000  0.000000  0.000000
10  0.151093  0.421053  0.214286  0.362435  0.452187
11  0.250497  0.157895  0.357143  0.301962  0.369904
12  0.194831  0.000000  0.214286  0.239087  0.154930
13  0.787276  0.368421  0.142857  0.585102  0.524463
14  0.067594  0.105263  0.142857  0.383260  0.329874
15  0.421471  0.157895  0.714286  0.502603  0.614529
16  0.445328  0.368421  0.428571  0.437325  0.581542
17  0.270378  0.210526  0.285714  0.203444  0.228317
18  0.697813  0.210526  1.000000  0.669203  0.716086
19  0.580517  0.315789  0.000000  0.237485  0.163825
20  0.546720  0.315789  0.500000  0.539047  0.702001
21  0.727634  0.631579  0.571429  0.472167  0.424759
22  1.000000  1.000000  0.428571  1.000000  1.000000
23  0.365805  0.000000  0.357143  0.657189  0.648258
24  0.135189  0.473684  0.285714  0.405286  0.434025
>>> crime_anal_norm.head()
         강간        강도        살인  ...       살인검거율      절도검거율      폭력검거율
0  0.296223  0.473684  0.428571  ...  100.000000  55.048662  97.806813
1  0.324056  0.421053  0.000000  ...    0.000000  48.158180  87.530325
2  0.443340  0.210526  0.000000  ...  100.000000  46.508172  84.670307
3  0.055666  0.105263  0.000000  ...  100.000000  50.652985  88.389994
4  0.312127  0.631579  0.357143  ...   83.333333  52.612613  88.536813

[5 rows x 10 columns]
>>> crime_anal.head()
   자치구  발생합계  검거합계        살인  ...      절도검거율      폭력검거율   이혼        인구
0  종로구  4057  4437  0.428571  ...  55.048662  97.806813  265  10124579
1   중구  4184  2851  0.000000  ...  48.158180  87.530325  253    164257
2  용산구  4060  2936  0.000000  ...  46.508172  84.670307  389    134593
3  성동구  2767  2031  0.000000  ...  50.652985  88.389994  509    244444
4  광진구  4646  3289  0.357143  ...  52.612613  88.536813  612    312711

[5 rows x 15 columns]
>>> crime_anal[['강간']]=crime_anal_norm[['강간']]
>>> crime_anal[['강도']]=crime_anal_norm[['강도']]
>>> crime_anal[['살인']]=crime_anal_norm[['살인']]
>>> crime_anal[['절도']]=crime_anal_norm[['절도']]
>>> crime_anal[['폭력']]=crime_anal_norm[['폭력']]
>>> crime_anal.head()
   자치구  발생합계  검거합계        살인  ...      절도검거율      폭력검거율   이혼        인구
0  종로구  4057  4437  0.428571  ...  55.048662  97.806813  265  10124579
1   중구  4184  2851  0.000000  ...  48.158180  87.530325  253    164257
2  용산구  4060  2936  0.000000  ...  46.508172  84.670307  389    134593
3  성동구  2767  2031  0.000000  ...  50.652985  88.389994  509    244444
4  광진구  4646  3289  0.357143  ...  52.612613  88.536813  612    312711

[5 rows x 15 columns]
>>> crime_anal[['폭력']]
          폭력
0   0.328021
1   0.297628
2   0.416234
3   0.111564
4   0.329133
5   0.367309
6   0.593032
7   0.238695
8   0.332839
9   0.000000
10  0.452187
11  0.369904
12  0.154930
13  0.524463
14  0.329874
15  0.614529
16  0.581542
17  0.228317
18  0.716086
19  0.163825
20  0.702001
21  0.424759
22  1.000000
23  0.648258
24  0.434025
>>> crime_anal[['살인']]
          살인
0   0.428571
1   0.000000
2   0.000000
3   0.000000
4   0.357143
5   0.714286
6   0.285714
7   0.428571
8   0.500000
9   0.000000
10  0.214286
11  0.357143
12  0.214286
13  0.142857
14  0.142857
15  0.714286
16  0.428571
17  0.285714
18  1.000000
19  0.000000
20  0.500000
21  0.571429
22  0.428571
23  0.357143
24  0.285714
>>> crime_anal[['폭력']]
          폭력
0   0.328021
1   0.297628
2   0.416234
3   0.111564
4   0.329133
5   0.367309
6   0.593032
7   0.238695
8   0.332839
9   0.000000
10  0.452187
11  0.369904
12  0.154930
13  0.524463
14  0.329874
15  0.614529
16  0.581542
17  0.228317
18  0.716086
19  0.163825
20  0.702001
21  0.424759
22  1.000000
23  0.648258
24  0.434025
>>> crime_anal_norm=crime_anal
>>> crime_anal_norm.head()
   자치구  발생합계  검거합계        살인  ...      절도검거율      폭력검거율   이혼        인구
0  종로구  4057  4437  0.428571  ...  55.048662  97.806813  265  10124579
1   중구  4184  2851  0.000000  ...  48.158180  87.530325  253    164257
2  용산구  4060  2936  0.000000  ...  46.508172  84.670307  389    134593
3  성동구  2767  2031  0.000000  ...  50.652985  88.389994  509    244444
4  광진구  4646  3289  0.357143  ...  52.612613  88.536813  612    312711

[5 rows x 15 columns]

>>> col = ['강간','강도','살인','절도','폭력']
>>> crime_anal_norm['범죄'] = np.sum(crime_anal_norm[col], axis=1)
>>> crime_anal_norm.head()
   자치구  발생합계  검거합계        살인  ...      폭력검거율   이혼        인구        범죄
0  종로구  4057  4437  0.428571  ...  97.806813  265  10124579  1.931385
1   중구  4184  2851  0.000000  ...  87.530325  253    164257  1.528519
2  용산구  4060  2936  0.000000  ...  84.670307  389    134593  1.355643
3  성동구  2767  2031  0.000000  ...  88.389994  509    244444  0.448304
4  광진구  4646  3289  0.357143  ...  88.536813  612    312711  2.265544

[5 rows x 16 columns]
>>> col = ['강간검거율','강도검거율','살인검거율','절도검거율','폭력검거율']
>>> crime_anal_norm['검거'] = np.sum(crime_anal_norm[col], axis=1)
>>> crime_anal_norm.head()
   자치구  발생합계  검거합계        살인  ...   이혼        인구        범죄          검거
0  종로구  4057  4437  0.428571  ...  265  10124579  1.931385  452.855475
1   중구  4184  2851  0.000000  ...  253    164257  1.528519  291.493748
2  용산구  4060  2936  0.000000  ...  389    134593  1.355643  399.557684
3  성동구  2767  2031  0.000000  ...  509    244444  0.448304  419.346009
4  광진구  4646  3289  0.357143  ...  612    312711  2.265544  365.714707

[5 rows x 17 columns]
>>> crime_anal_norm
     자치구  발생합계  검거합계        살인  ...    이혼        인구        범죄          검거
0    종로구  4057  4437  0.428571  ...   265  10124579  1.931385  452.855475
1     중구  4184  2851  0.000000  ...   253    164257  1.528519  291.493748
2    용산구  4060  2936  0.000000  ...   389    134593  1.355643  399.557684
3    성동구  2767  2031  0.000000  ...   509    244444  0.448304  419.346009
4    광진구  4646  3289  0.357143  ...   612    312711  2.265544  365.714707
5   동대문구  3975  3274  0.714286  ...   624    372298  1.674170  440.015847
6    중랑구  4571  3392  0.285714  ...   956    366011  1.479631  421.638733
7    성북구  3434  2479  0.428571  ...   732    412780  1.457606  415.304730
8    강북구  3393  2824  0.500000  ...   742    455407  1.507971  401.440707
9    도봉구  1999  1652  0.000000  ...   666    328002  0.105263  454.589019
10   노원구  4209  3047  0.214286  ...  1003    346234  1.601054  398.822941
11   은평구  3883  3207  0.357143  ...   917    558075  1.437401  450.817072
12  서대문구  3113  2299  0.214286  ...   485    491202  0.803133  431.173803
13   마포구  5278  3499  0.142857  ...   576    325028  2.408119  408.898919
14   양천구  3882  2660  0.142857  ...   700    385783  1.028849  352.060974
15   강서구  5135  3927  0.714286  ...  1120    475018  2.410784  426.257361
16   구로구  4895  3408  0.428571  ...   775    608255  2.261187  363.474489
17   금천구  3265  2572  0.285714  ...   525    441559  1.198380  436.838689
18  영등포구  5969  4012  1.000000  ...   628    253491  3.293628  375.538577
19   동작구  3330  2242  0.000000  ...   598    402024  1.297616  378.290841
20   관악구  5525  4154  0.500000  ...   817    408493  2.603557  401.230996
21   서초구  4708  3237  0.571429  ...   561    520929  2.827567  347.578202
22   강남구  7720  5321  0.428571  ...   805    445401  4.428571  412.122106
23   송파구  5576  3870  0.357143  ...  1041    561052  2.028395  415.378636
24   강동구  4261  3245  0.285714  ...   784    671173  1.733899  442.771638

[25 rows x 17 columns]
>>> import matplotlib.pyplot as plt
>>> import seaborn as sns
>>> import platform
>>> path = "c:/Windows/Fonts/malgun.ttf"
>>> from matplotlib import font_manager, rc
>>> if platform.system() == 'Darwin':
    rc('font', family='AppleGothic')
elif platform.system() == 'Windows':
    font_name = font_manager.FontProperties(fname=path).get_name()
    rc('font', family=font_name)
else:
    print('Unknown system... sorry~~~~')

    
>>> crime_anal_norm.head()
   자치구  발생합계  검거합계        살인  ...   이혼        인구        범죄          검거
0  종로구  4057  4437  0.428571  ...  265  10124579  1.931385  452.855475
1   중구  4184  2851  0.000000  ...  253    164257  1.528519  291.493748
2  용산구  4060  2936  0.000000  ...  389    134593  1.355643  399.557684
3  성동구  2767  2031  0.000000  ...  509    244444  0.448304  419.346009
4  광진구  4646  3289  0.357143  ...  612    312711  2.265544  365.714707

[5 rows x 17 columns]
>>> sns.pairplot(crime_anal_norm, vars=["강도", "살인", "폭력"], kind='reg', height=3)
<seaborn.axisgrid.PairGrid object at 0x000002A98E1BCFD0>

>>> plt.show()

>>> sns.pairplot(crime_anal_norm, x_vars=["인구", "이혼"], 
             y_vars=["살인", "강도"], kind='reg', height=3)
	 
<seaborn.axisgrid.PairGrid object at 0x000002A98C13A160>
>>> plt.show()
	 
>>> sns.pairplot(crime_anal_norm, x_vars=["인구", "이혼"], 
             y_vars=["살인", "폭력"], kind='reg', height=3)
	 
<seaborn.axisgrid.PairGrid object at 0x000002A98E1BCFD0>
>>> plt.show()
>>> sns.pairplot(crime_anal_norm, x_vars=["인구", "이혼"], 
             y_vars=["살인", "폭력"], kind='reg', height=3)
<seaborn.axisgrid.PairGrid object at 0x000002A98C15BDD8>
>>> plt.show()
>>> sns.pairplot(crime_anal_norm, x_vars=["인구", "이혼"], 
             y_vars=["살인", "폭력"], kind='reg', height=3)
<seaborn.axisgrid.PairGrid object at 0x000002A98E115D30>
 
>>> plt.ylim(0, 1)
		    
(0, 1)
>>> plt.show()
		    
>>> tmp_max = crime_anal_norm['검거'].max()
		    
>>> crime_anal_norm['검거'] = crime_anal_norm['검거'] / tmp_max * 100
		    
>>> crime_anal_norm_sort = crime_anal_norm.sort_values(by='검거', ascending=False)
		    
>>> crime_anal_norm_sort.head()
		    
     자치구  발생합계  검거합계        살인  ...   이혼        인구        범죄          검거
9    도봉구  1999  1652  0.000000  ...  666    328002  0.105263  100.000000
0    종로구  4057  4437  0.428571  ...  265  10124579  1.931385   99.618657
11   은평구  3883  3207  0.357143  ...  917    558075  1.437401   99.170251
24   강동구  4261  3245  0.285714  ...  784    671173  1.733899   97.400425
5   동대문구  3975  3274  0.714286  ...  624    372298  1.674170   96.794209

[5 rows x 17 columns]
>>> target_col = ['강간검거율', '강도검거율', '살인검거율', '절도검거율', '폭력검거율']
		    
>>> crime_anal_norm_sort = crime_anal_norm.sort_values(by='검거', ascending=False)
		    
>>> plt.figure(figsize = (10,10))
		    
<Figure size 1000x1000 with 0 Axes>
>>> sns.heatmap(crime_anal_norm_sort[target_col], annot=True, fmt='f', 
                    linewidths=.5, cmap='RdPu')
		    
<matplotlib.axes._subplots.AxesSubplot object at 0x000002A98C7DF2B0>
>>> plt.title('범죄 검거 비율 (정규화된 검거의 합으로 정렬)')
		    
Text(0.5, 1.0, '범죄 검거 비율 (정규화된 검거의 합으로 정렬)')
>>> plt.show()
		    
>>> target_col = ['강간', '강도', '살인', '절도', '폭력', '범죄']
		    
>>> crime_anal_norm['범죄'] = crime_anal_norm['범죄'] / 5
		    
>>> crime_anal_norm_sort = crime_anal_norm.sort_values(by='범죄', ascending=False)
		    
>>> plt.figure(figsize = (10,10))
		    
<Figure size 1000x1000 with 0 Axes>
>>> sns.heatmap(crime_anal_norm_sort[target_col], annot=True, fmt='f', linewidths=.5,
                       cmap='RdPu')
		    
<matplotlib.axes._subplots.AxesSubplot object at 0x000002A98BE80978>
>>> plt.title('범죄비율 (정규화된 발생 건수로 정렬)')
		    
Text(0.5, 1.0, '범죄비율 (정규화된 발생 건수로 정렬)')
>>> plt.show()
		    
>>>  sns.heatmap(crime_anal_norm_sort[target_col], annot=True, fmt='t', linewidths=.5,
                       cmap='RdPu')
		    
SyntaxError: unexpected indent
>>> sns.heatmap(crime_anal_norm_sort[target_col], annot=True, fmt='f', linewidths=.5,
                       cmap='RdPu')
		    
<matplotlib.axes._subplots.AxesSubplot object at 0x000002A98C7DFE10>
>>> plt.show()
		    
>>> sns.heatmap(crime_anal_norm_sort[target_col], annot=True, fmt='t', linewidths=.5,
                       cmap='RdPu')
		    

>>> plt.show()
	 
>>> crime_anal_norm_sort = crime_anal_norm.sort_values(by='범죄', ascending=False)
	 
>>> crime_anal_norm_sort.head()
	 
     자치구  발생합계  검거합계        살인  ...    이혼      인구        범죄         검거
22   강남구  7720  5321  0.428571  ...   805  445401  0.885714  90.658174
18  영등포구  5969  4012  1.000000  ...   628  253491  0.658726  82.610569
21   서초구  4708  3237  0.571429  ...   561  520929  0.565513  76.459876
20   관악구  5525  4154  0.500000  ...   817  408493  0.520711  88.262360
15   강서구  5135  3927  0.714286  ...  1120  475018  0.482157  93.767633

[5 rows x 17 columns]
>>> plt.figure(figsize = (10,10))
	 
<Figure size 1000x1000 with 0 Axes>
>>> crime_anal_norm_sort
     자치구  발생합계  검거합계        살인  ...    이혼        인구        범죄          검거
22   강남구  7720  5321  0.428571  ...   805    445401  0.885714   90.658174
18  영등포구  5969  4012  1.000000  ...   628    253491  0.658726   82.610569
21   서초구  4708  3237  0.571429  ...   561    520929  0.565513   76.459876
20   관악구  5525  4154  0.500000  ...   817    408493  0.520711   88.262360
15   강서구  5135  3927  0.714286  ...  1120    475018  0.482157   93.767633
13   마포구  5278  3499  0.142857  ...   576    325028  0.481624   89.949141
4    광진구  4646  3289  0.357143  ...   612    312711  0.453109   80.449525
16   구로구  4895  3408  0.428571  ...   775    608255  0.452237   79.956724
23   송파구  5576  3870  0.357143  ...  1041    561052  0.405679   91.374543
0    종로구  4057  4437  0.428571  ...   265  10124579  0.386277   99.618657
24   강동구  4261  3245  0.285714  ...   784    671173  0.346780   97.400425
5   동대문구  3975  3274  0.714286  ...   624    372298  0.334834   96.794209
10   노원구  4209  3047  0.214286  ...  1003    346234  0.320211   87.732638
1     중구  4184  2851  0.000000  ...   253    164257  0.305704   64.122479
8    강북구  3393  2824  0.500000  ...   742    455407  0.301594   88.308492
6    중랑구  4571  3392  0.285714  ...   956    366011  0.295926   92.751632
7    성북구  3434  2479  0.428571  ...   732    412780  0.291521   91.358285
11   은평구  3883  3207  0.357143  ...   917    558075  0.287480   99.170251
2    용산구  4060  2936  0.000000  ...   389    134593  0.271129   87.894267
19   동작구  3330  2242  0.000000  ...   598    402024  0.259523   83.216010
17   금천구  3265  2572  0.285714  ...   525    441559  0.239676   96.095302
14   양천구  3882  2660  0.142857  ...   700    385783  0.205770   77.445992
12  서대문구  3113  2299  0.214286  ...   485    491202  0.160627   94.849146
3    성동구  2767  2031  0.000000  ...   509    244444  0.089661   92.247281
9    도봉구  1999  1652  0.000000  ...   666    328002  0.021053  100.000000

[25 rows x 17 columns]
>>> target_col
['강간', '강도', '살인', '절도', '폭력', '범죄']
>>> crime_anal_norm['범죄']
0     0.386277
1     0.305704
2     0.271129
3     0.089661
4     0.453109
5     0.334834
6     0.295926
7     0.291521
8     0.301594
9     0.021053
10    0.320211
11    0.287480
12    0.160627
13    0.481624
14    0.205770
15    0.482157
16    0.452237
17    0.239676
18    0.658726
19    0.259523
20    0.520711
21    0.565513
22    0.885714
23    0.405679
24    0.346780
Name: 범죄, dtype: float64
>>> plt.figure(figsize = (10,10))
<Figure size 1000x1000 with 0 Axes>
>>> sns.heatmap(crime_anal_norm_sort[target_col], annot=True, fmt='f', linewidths=.5,
                       cmap='RdPu')
<matplotlib.axes._subplots.AxesSubplot object at 0x000002A98EDCDC50>
>>> plt.title('범죄비율 (정규화된 발생 건수로 정렬)')
Text(0.5, 1.0, '범죄비율 (정규화된 발생 건수로 정렬)')
>>> plt.show()
>>> import folium
>>> import folium
>>> import pandas as pd
>>> geo_path='D:/SMWU_PY/DataScience-master/data/02. skorea_municipalities_geo_simple.json'
>>> import json
>>> geo_str=json.load(open(geo_path, encoding='utf-8'))
>>> map = folium.Map(location=[37.5502, 126.982], zoom_start=11, 
                 tiles='Stamen Toner')

>>> import warnings
>>> warnings.simplefilter(action = "ignore", category = FutureWarning)
>>> map1 = folium.Map(location=[37.5502, 126.982], zoom_start=11, 
                 tiles='Stamen Toner')
>>> map1.choropleth(geo_data = geo_str,
               data = crime_anal_norm['범죄'],
               columns = [crime_anal_norm.index, crime_anal_norm['범죄']],
               fill_color = 'PuRd', #PuRd, YlGnBu
               key_on = 'feature.id')
>>> map1.save("D:/SMWU_PY/crime_bum.html")
>>> tmp_criminal = crime_anal_norm['범죄'] /  crime_anal_norm['인구수'] * 10000000

>>> tmp_criminal = crime_anal_norm['범죄'] /  crime_anal_norm['인구'] * 10000000
>>> map2 = folium.Map(location=[37.5502, 126.982], zoom_start=11, 
                 tiles='Stamen Toner')
>>> map2.choropleth(geo_data = geo_str,
               data = tmp_criminal,
               columns = [crime_anal.index, tmp_criminal],
               fill_color = 'PuRd', #PuRd, YlGnBu
               key_on = 'feature.id')
>>> map2
<folium.folium.Map object at 0x000002A98BE0B978>
>>> map2.save("D:/SMWU_PY/crime_bum.html")
>>> map2.save("D:/SMWU_PY/crime_bum2.html")
>>> map=0
>>> 
map = folium.Map(location=[37.5502, 126.982], zoom_start=11, 
                 tiles='Stamen Toner')
>>> map.choropleth(geo_data = geo_str,
               data = crime_anal_norm['살인'],
               columns = [crime_anal_norm.index, crime_anal_norm['살인']],
               fill_color = 'PuRd', #PuRd, YlGnBu
               key_on = 'feature.id')
>>> map
<folium.folium.Map object at 0x000002A98BE0B828>
>>> map.save("D:/SMWU_PY/salin.html")
>>> crime_anal_norm['살인']
0     0.428571
1     0.000000
2     0.000000
3     0.000000
4     0.357143
5     0.714286
6     0.285714
7     0.428571
8     0.500000
9     0.000000
10    0.214286
11    0.357143
12    0.214286
13    0.142857
14    0.142857
15    0.714286
16    0.428571
17    0.285714
18    1.000000
19    0.000000
20    0.500000
21    0.571429
22    0.428571
23    0.357143
24    0.285714
Name: 살인, dtype: float64
>>> crime_anal_norm.to_csv('D:/SMWU_PY/2017_crime_final.csv', sep=',', encoding='utf-8')
>>> crime_anal_norm= pd.read_csv('D:/SMWU_PY/2017_crime_final.csv', 
                             encoding='utf-8', index_col='자치구')

>>> crime_anal_norm.head()
     발생합계  검거합계        살인        강도  ...   이혼        인구        범죄         검거
자치구                                  ...                                    
종로구  4057  4437  0.428571  0.473684  ...  265  10124579  0.386277  99.618657
중구   4184  2851  0.000000  0.421053  ...  253    164257  0.305704  64.122479
용산구  4060  2936  0.000000  0.210526  ...  389    134593  0.271129  87.894267
성동구  2767  2031  0.000000  0.105263  ...  509    244444  0.089661  92.247281
광진구  4646  3289  0.357143  0.631579  ...  612    312711  0.453109  80.449525

[5 rows x 16 columns]
>>> plt.figure(figsize = (10,10))
<Figure size 1000x1000 with 0 Axes>
>>> sns.heatmap(crime_anal_norm_sort[target_col], annot=True, fmt='f', 
                    linewidths=.5, cmap='RdPu')
<matplotlib.axes._subplots.AxesSubplot object at 0x000002A98CC8C5C0>
>>> plt.title('범죄 검거 비율 (정규화된 검거의 합으로 정렬)')
Text(0.5, 1.0, '범죄 검거 비율 (정규화된 검거의 합으로 정렬)')
>>> plt.show()
>>> crime_anal_norm_sort = crime_anal_norm.sort_values(by='검거', ascending=False)
>>> plt.figure(figsize = (10,10))
<Figure size 1000x1000 with 0 Axes>
>>> sns.heatmap(crime_anal_norm_sort[target_col], annot=True, fmt='f', 
                    linewidths=.5, cmap='RdPu')
<matplotlib.axes._subplots.AxesSubplot object at 0x000002A98E142278>
>>> plt.title('범죄 검거 비율 (정규화된 검거의 합으로 정렬)')
Text(0.5, 1.0, '범죄 검거 비율 (정규화된 검거의 합으로 정렬)')
>>> plt.show()
>>> target_col = ['강간검거율', '강도검거율', '살인검거율', '절도검거율', '폭력검거율']
>>> crime_anal_norm_sort = crime_anal_norm.sort_values(by='검거', ascending=False)
>>> plt.figure(figsize = (10,10))
<Figure size 1000x1000 with 0 Axes>
>>> sns.heatmap(crime_anal_norm_sort[target_col], annot=True, fmt='f', 
                    linewidths=.5, cmap='RdPu')
<matplotlib.axes._subplots.AxesSubplot object at 0x000002A98C2A00F0>
>>> plt.title('범죄 검거 비율 (정규화된 검거의 합으로 정렬)')
Text(0.5, 1.0, '범죄 검거 비율 (정규화된 검거의 합으로 정렬)')
>>> plt.show()
>>> target_col = ['강간', '강도', '살인', '절도', '폭력', '범죄']
>>> crime_anal_norm_sort = crime_anal_norm.sort_values(by='범죄', ascending=False)
>>> plt.figure(figsize = (10,10))
<Figure size 1000x1000 with 0 Axes>
>>> sns.heatmap(crime_anal_norm_sort[target_col], annot=True, fmt='f', linewidths=.5,
                       cmap='RdPu')
<matplotlib.axes._subplots.AxesSubplot object at 0x000002A98DDD3898>
>>> plt.title('범죄비율 (정규화된 발생 건수로 정렬)')
Text(0.5, 1.0, '범죄비율 (정규화된 발생 건수로 정렬)')
>>> plt.show()
>>> 
map_bum = folium.Map(location=[37.5502, 126.982], zoom_start=11, 
                 tiles='Stamen Toner')
>>> tmp_criminal = crime_anal_norm['범죄'] /  crime_anal_norm['인구'] * 1000000
>>> map_bum.choropleth(geo_data = geo_str,
               data = tmp_criminal,
               columns = [crime_anal.index, tmp_criminal],
               fill_color = 'PuRd', #PuRd, YlGnBu
               key_on = 'feature.id')
>>> map_bum
<folium.folium.Map object at 0x000002A98E13D6A0>
>>> map_bum("D:/SMWU_PY/final_bum.html")
Traceback (most recent call last):
  File "<pyshell#222>", line 1, in <module>
    map_bum("D:/SMWU_PY/final_bum.html")
TypeError: 'Map' object is not callable
>>> map_bum.save("D:/SMWU_PY/final_bum.html")
>>> map_gum = folium.Map(location=[37.5502, 126.982], zoom_start=11, 
                 tiles='Stamen Toner')
>>> map_gum.choropleth(geo_data = geo_str,
               data = crime_anal_norm['검거'],
               columns = [crime_anal_norm.index, crime_anal_norm['검거']],
               fill_color = 'YlGnBu', #PuRd, YlGnBu
               key_on = 'feature.id')
>>> map_gum
<folium.folium.Map object at 0x000002A98BD2F240>
>>> map_gum.save("D:/SMWU_PY/final_gum.html")
>>> map_gum2 = folium.Map(location=[37.5502, 126.982], zoom_start=11, 
                 tiles='Stamen Toner')
>>> map_gum2.choropleth(geo_data = geo_str,
               data = crime_anal_norm['검거'],
               columns = [crime_anal_norm.index, crime_anal_norm['검거']],
               fill_color = 'PuRd', #PuRd, YlGnBu
               key_on = 'feature.id')
>>> map_gum2
<folium.folium.Map object at 0x000002A98C812DA0>
>>> map_gum2.save("D:/SMWU_PY/final_gum2.html")
>>> map_pok = folium.Map(location=[37.5502, 126.982], zoom_start=11, 
                 tiles='Stamen Toner')
>>> map_pok.choropleth(geo_data = geo_str,
               data = crime_anal_norm['폭력'],
               columns = [crime_anal_norm.index, crime_anal_norm['폭력']],
               fill_color = 'PuRd', #PuRd, YlGnBu
               key_on = 'feature.id')
>>> map_pok
<folium.folium.Map object at 0x000002A98C81B208>
>>> map_pok.save("D:/SMWU_PY/final_pok.html")
>>> map_ihon = folium.Map(location=[37.5502, 126.982], zoom_start=11, 
                 tiles='Stamen Toner')
>>> map_ihon.choropleth(geo_data = geo_str,
               data = crime_anal_norm['이혼'],
               columns = [crime_anal_norm.index, crime_anal_norm['이혼']],
               fill_color = 'PuRd', #PuRd, YlGnBu
               key_on = 'feature.id')
>>> map_ihon
<folium.folium.Map object at 0x000002A98C814048>
>>> map_ihon.save("D:/SMWU_PY/final_ihon.html")
>>> map_ihon2 = folium.Map(location=[37.5502, 126.982], zoom_start=11, 
                 tiles='Stamen Toner')
>>> crime_anal_norm['이혼율']=crime_anal_norm['이혼']/crime_anal_norm['인구']
>>> map_ihon2.choropleth(geo_data = geo_str,
               data = crime_anal_norm['이혼율'],
               columns = [crime_anal_norm.index, crime_anal_norm['이혼율']],
               fill_color = 'PuRd', #PuRd, YlGnBu
               key_on = 'feature.id')
>>> map_ihon2
<folium.folium.Map object at 0x000002A98C84A2B0>
>>> map_ihon2.save("D:/SMWU_PY/final_ihon.html")
>>> 